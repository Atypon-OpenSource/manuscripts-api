name: CI

on:
  push:
    branches:
      - master

env:
  CI: true


jobs:
  build_lint:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: checkout code repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: setup node.js
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: install
        run: npm ci

      - name: build_lint
        run: |
          npm run build
          npm run lint
          ./bin/dump-mail-templates.js

  run_app:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build_lint
    steps:
      - name: checkout code repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: run_app
        run: |
          npm ci
          ./bin/build-env.js .env.example > .env
          export env $(grep -v '^#' ".env" | xargs)
          NODE_ENV=production npx gulp -f docker/utils/Gulpfile.js
          cd docker
          cp ../.env .env
          docker-compose build --pull
          docker-compose up -d
          sleep 20
          if [[  -z `nc -z localhost 3000` ]]; then
              echo "server is running"
              exit 0
          else
              echo "server is NOT running"
              exit 1
          fi

  unit_tests:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build_lint
    steps:
      - name: checkout code repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: run_test_suite
        run: |
          npm ci
          ./bin/set-package-json-version.sh
          ./bin/build-env.js .env.example > .env
          export env $(grep -v '^#' ".env" | xargs)
          NODE_ENV=test APP_TEST_ACTION=test:unit npx gulp -f docker/utils/Gulpfile.js
          cd docker
          cp ../.env .env
          docker-compose build --pull
          docker-compose up --build --abort-on-container-exit test_runner

  integration_tests:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build_lint
    steps:
      - name: checkout code repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: cache node modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: run_test_suite
        env:
          DEV_PRESSROOM_APIKEY: ${{secrets.DEV_PRESSROOM_APIKEY}}
        run: |
          npm ci
          ./bin/set-package-json-version.sh
          ./bin/build-env.js .env.example > .env
          export env $(grep -v '^#' ".env" | xargs)
          NODE_ENV=test APP_TEST_ACTION=test:int APP_PRESSROOM_BASE_URL=https://pressroom-js-dev.manuscripts.io APP_PRESSROOM_APIKEY=$DEV_PRESSROOM_APIKEY npx gulp -f docker/utils/Gulpfile.js
          cd docker
          cp ../.env .env
          docker-compose build --pull
          docker-compose up -d postgres
          APP_DATABASE_URL=postgresql://postgres:admin@localhost:5432/test?schema=public npm run migrate-prisma
          docker-compose up --build --abort-on-container-exit test_runner