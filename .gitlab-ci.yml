variables:
  GET_SOURCES_ATTEMPTS: 10

stages:
- build
- test_init
- test_unit
- test_int
- prepare_images
- purge_deployment
- deploy_operator
- deploy_service

before_script:
- if [ -f ./docker/docker-compose.yml ]; then docker-compose -f ./docker/docker-compose.yml down -v; fi
- echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin registry.gitlab.com
- sleep 2

after_script:
- if [ -f ./docker/docker-compose.yml ]; then docker-compose -f ./docker/docker-compose.yml down -v; fi
- sleep 2

build:
  stage: build
  script:
    - npm ci
    - npm run build
    - ./bin/dump-mail-templates.js # turn into actual snapshot tests of the different emailing actions.
  tags:
    - nodejs
  except:
    variables:
      - $SKIP_BUILD == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-build/

.echo_build_env:
  stage: build
  script:
    - ./bin/build-env.js .env.example > build.env
  tags:
    -  nodejs
  artifacts:
    paths:
      - build.env

docs:
  stage: build
  script:
    - cd doc
    - npm ci
    - ./node_modules/spectacle-docs/bin/spectacle.js manuscripts-io-api-v1.yaml -t swagger
    - AWS_ACCESS_KEY_ID=${DOCS_S3_ACCESS_KEY} AWS_SECRET_ACCESS_KEY=${DOCS_S3_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${DOCS_S3_REGION} aws s3 cp swagger s3://${DOCS_S3_SWAGGER_BUCKET} --recursive --include "*"
    - AWS_ACCESS_KEY_ID=${DOCS_S3_ACCESS_KEY} AWS_SECRET_ACCESS_KEY=${DOCS_S3_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${DOCS_S3_REGION} aws cloudfront create-invalidation --distribution-id ${SWAGGER_DISTRIBUTION_ID} --paths /index.html / '/*'
    - cd ../
    - npm ci
    - ./doc/node_modules/typedoc/bin/typedoc --out doc/api --includes './src'
    - AWS_ACCESS_KEY_ID=${DOCS_S3_ACCESS_KEY} AWS_SECRET_ACCESS_KEY=${DOCS_S3_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${DOCS_S3_REGION} aws s3 cp doc/api s3://${DOCS_S3_API_BUCKET} --recursive --include "*"
    - AWS_ACCESS_KEY_ID=${DOCS_S3_ACCESS_KEY} AWS_SECRET_ACCESS_KEY=${DOCS_S3_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${DOCS_S3_REGION} aws cloudfront create-invalidation --distribution-id ${DOCS_DISTRIBUTION_ID} --paths /index.html / '/*'
  artifacts:
    paths:
      - doc/swagger
      - doc/api
    expire_in: 4 weeks
    when: always
  tags:
    - nodejs
  only:
    - master
    - triggers
    - /^\d+\./
  except:
    variables:
      - $SKIP_BUILD == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-build/

lint:
  stage: build
  script:
    - npm ci
    - npm run lint
  tags:
    - nodejs
  except:
    variables:
      - $SKIP_BUILD == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-build/

run_app_init:
  stage: test_init
  script:
    - npm ci
    - npm run build
    - ./bin/build-env.js .env.example > .env
    - export env $(grep -v '^#' ".env" | xargs)
    - APP_INITIALIZE=1 NODE_ENV=production npx gulp -f docker/utils/Gulpfile.js
    - cd docker
    - cp ../.env .env
    - docker-compose build --pull
    - docker-compose pull sync_gateway couchbase
    - docker-compose up --abort-on-container-exit
  tags:
    - nodejs
  except:
    variables:
      - $SKIP_TESTS == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-tests/

unit_tests:
  stage: test_unit
  script:
    - npm ci
    - ./bin/set-package-json-version.sh
    - ./bin/build-env.js .env.example > .env
    - export env $(grep -v '^#' ".env" | xargs)
    - NODE_ENV=test APP_TEST_ACTION=test:unit npx gulp -f docker/utils/Gulpfile.js
    - cd docker
    - cp ../.env .env
    - docker-compose build --pull
    - docker-compose pull sync_gateway couchbase
    - docker-compose up --build --abort-on-container-exit test_runner
  tags:
    - docker-ce
    - docker-compose
  coverage: '/Statements\s*:\s*(\d+\.\d+)%/'
  artifacts:
    paths:
      - coverage/unit
    reports:
      junit: junit.xml
    expire_in: 1 week
    when: always
  except:
    refs:
      - /^deployment/
    variables:
      - $SKIP_TESTS == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-tests/

integration_tests:
  stage: test_int
  script:
    - npm ci
    - ./bin/set-package-json-version.sh
    - ./bin/build-env.js .env.example > .env
    - export env $(grep -v '^#' ".env" | xargs)
    - export NODE_ENV=test
    - NODE_ENV=test APP_TEST_ACTION=test:int npx gulp -f docker/utils/Gulpfile.js
    - cd docker
    - cp ../.env .env
    - docker-compose build --pull
    - docker-compose pull sync_gateway couchbase
    - docker-compose up --build --abort-on-container-exit
  tags:
    - docker-ce
    - docker-compose
#  artifacts:
#    paths:
#      - coverage/int
#    expire_in: 1 week
#    when: always
  except:
    refs:
      - /^deployment/
    variables:
      - $SKIP_TESTS == "true"
      - $CI_COMMIT_MESSAGE =~ /skip-tests/

.eventing_tests:
  stage: test
  script:
    - npm ci
    - ./bin/set-package-json-version.sh
    - ./bin/build-env.js .env.example > .env
    - export env $(grep -v '^#' ".env" | xargs)
    - export NODE_ENV=test
    - NODE_ENV=test APP_TEST_ACTION=test:evt npx gulp -f docker/utils/Gulpfile.js
    - cd docker
    - cp ../.env .env
    - docker-compose build --pull
    - docker-compose pull sync_gateway couchbase
    - docker-compose up --build --abort-on-container-exit
  tags:
    - docker-ce
    - docker-compose
  except:
    refs:
      - /^deployment/
    variables:
      - $SKIP_TESTS == "true"
      - $CI_COMMIT_MESSAGE =~ /skip-tests/

prepare_images:
  stage: prepare_images
  script:
    - ./bin/set-package-json-version.sh
    - ./docker/push-images.sh
  tags:
    - nodejs
    - docker-compose
  only:
    - master
    - triggers
    - /^\d+\./
  except:
    variables:
      - $SKIP_PREPARING_IMAGES == "true"
      - $CI_COMMIT_MESSAGE =~ /#skip-preparing-images/

prepare_images_manual:
  stage: prepare_images
  script:
    - ./bin/set-package-json-version.sh
    - ./docker/push-images.sh
  tags:
    - nodejs
    - docker-compose
  when: manual
