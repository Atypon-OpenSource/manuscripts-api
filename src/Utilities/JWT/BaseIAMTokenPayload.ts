/*!
 * Â© 2020 Atypon Systems LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { config } from '../../Config/Config'

/**
 * Represents contents of JWT token returned by IAM
 */
export interface BaseIAMTokenPayload {
  /**
   * epoc timestamp when the id_token was issued
   */
  iat: number
  /**
   * array of the applications (client) IDs in the IAM Domain
   * NOTE: As of now, it actually returns a string instead.
   */
  aud: any
  /**
   * session id that represents a unique id for the user across all the connect application
   */
  sid: string
  /**
   * Unique, persistent, user identifier generated by IAM
   */
  sub: string
  /**
   * An identifier of the IAM server
   */
  iss: string
  /**
   * Key ID. Confusingly set at the time of writing to 'jwt'
   */
  kid?: string
}

const requiredStringFields = ['sub', 'sid']

function isValidIssuer(issuer: string) {
  return issuer === config.IAM.authServerURL
}

// Basic check about base IAM token structure validation
export function isBaseIAMTokenPayload(
  obj: string | { [key: string]: any } | null
): obj is { [key: string]: any } {
  if (!obj) {
    return false
  }
  if (typeof obj === 'string') {
    return false
  }

  return requiredStringFields.every((key) => typeof obj[key] === 'string') && isValidIssuer(obj.iss)
}
